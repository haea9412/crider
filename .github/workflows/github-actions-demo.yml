name: Terraform Workflow

on:
  push:
    branches:
      - feat-sh
  workflow_dispatch:  # 수동 실행을 지원합니다

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "ap-southeast-2"
      S3_BUCKET: "crider-terraform"
      DYNAMODB_TABLE: "crider-terraform"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli jq

      - name: Terraform Init and Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          check_bucket_exists() {
            BUCKET_NAME="$1"
            output=$(aws s3 ls "s3://$BUCKET_NAME" 2>&1)
            if echo "$output" | grep -q "NoSuchBucket"; then
                echo "false"
            elif echo "$output" | grep -q "Access Denied"; then
                echo "access denied"
            else
                echo "true"
            fi
          }
          check_dynamodb_exists() {
            TABLE_NAME="$1"
            output=$(aws dynamodb describe-table --table-name "$TABLE_NAME" 2>&1)
            if echo "$output" | grep -q "ResourceNotFoundException"; then
                echo "false"
            elif echo "$output" | grep -q "AccessDeniedException"; then
                echo "access denied"
            else
                echo "true"
            fi
          }
          BUCKET_EXISTS=$(check_bucket_exists "$S3_BUCKET")
          DYNAMODB_EXISTS=$(check_dynamodb_exists "$DYNAMODB_TABLE")
          if [ -d backend ]; then
              cd backend
          else
              echo "Backend 디렉토리가 존재하지 않습니다. 종료합니다..."
              exit 1
          fi
          if [ "$BUCKET_EXISTS" = "true" ] && [ "$DYNAMODB_EXISTS" = "true" ]; then
              echo "S3 버킷과 DynamoDB 테이블이 모두 존재합니다. Terraform init을 건너뜁니다."
          elif [ "$BUCKET_EXISTS" = "access denied" ] || [ "$DYNAMODB_EXISTS" = "access denied" ]; then
              echo "리소스 확인 시 접근이 거부되었습니다. AWS 자격 증명 및 권한을 확인하십시오."
              exit 1
          else
              echo "하나 이상의 리소스가 존재하지 않으므로 Terraform을 초기화합니다."
              terraform init
              terraform plan
              terraform apply -auto-approve
          fi
          cd ../terraform_dev
          terraform init -backend-config="region=${{ env.AWS_REGION }}" -backend-config="bucket=${{ env.S3_BUCKET }}" -backend-config="key=dev/terraform-ci/terraform.tfstate"
          terraform plan -input=false
          terraform apply -auto-approve -input=false

  backend_setup:
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_REGION: "ap-southeast-2"
      S3_BUCKET: "crider-terraform"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli jq

      - name: Terraform Init for Backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform_dev
          terraform init -backend-config="region=${{ env.AWS_REGION }}" -backend-config="bucket=${{ env.S3_BUCKET }}" -backend-config="key=dev/terraform-ci/terraform.tfstate"

  backend_destroy:
    runs-on: ubuntu-latest
    # needs: backend_setup
    if: github.event_name == 'workflow_dispatch'  # 수동 실행일 때만 실행
    env:
      AWS_REGION: "ap-southeast-2"
      S3_BUCKET: "crider-terraform"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli jq

      - name: Terraform Destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if [ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]; then
              echo "파괴가 확인되었습니다. Terraform destroy 작업을 진행합니다."
              cd terraform_dev
              terraform init -backend-config="region=${{ env.AWS_REGION }}" -backend-config="bucket=${{ env.S3_BUCKET }}" -backend-config="key=dev/terraform-ci/terraform.tfstate"
              terraform destroy -auto-approve
          else
              echo "파괴가 확인되지 않았습니다. 종료합니다..."
              exit 1
          fi
